{"version":3,"sources":["components/ColorBtn/ColorBtn.js","components/PixelCount/PixelCount.js","components/ToggleButton/ToggleButton.js","components/Sidebar/Sidebar.js","components/Canvas/Pixel/Pixel.js","components/Canvas/Canvas.js","components/Content/Content.js","containers/Panel/Panel.js","App.js","serviceWorker.js","index.js","components/Sidebar/logo.png"],"names":["ColorBtn","state","displayPicker","handlerColorPicker","_this","setState","handleClose","showColor","display","marginRight","width","height","backgroundColor","this","props","color","borderRadius","picker","react_default","a","createElement","className","style","position","top","right","left","bottom","onClick","lib","onChange","changeColor","Fragment","Component","PixelCount","changeNumber","number","ToggleButton","styleBtn","active","title","type","join","clicked","children","sidebar","href","src","logo","alt","components_PixelCount_PixelCount","components_ColorBtn_ColorBtn","components_ToggleButton_ToggleButton","toggleGrid","grid","toggleErase","erase","resetBtn","target","rel","Pixel","pixelStyle","flexBasis","border","isNew","draggable","onMouseDown","onMouseEnter","mouseEnter","onTouchMove","touchMove","Canvas","pressed","canvas","React","createRef","downloadCanvas","domToImg","toPng","current","mouseDown","mouseUp","touchStart","e","touchEnd","console","log","pixelMouseEnter","pixelClick","totalPixels","styleCanvas","i","j","push","Canvas_Pixel_Pixel","Object","assign","key","onMouseUp","onMouseLeave","onTouchStart","onTouchEnd","ref","Content","canvasComponent","handleBtnClick","then","dataURL","swal","input","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","value","link","document","download","concat","click","components_Canvas_Canvas","Panel","numberPix","showGrid","isErase","n","html","newColor","hex","isNewHandler","setTimeout","Sidebar_Sidebar","components_Content_Content","App","containers_Panel_Panel","role","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.15c51db5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { ChromePicker } from 'react-color';\n\nimport './ColorBtn.css';\n\nclass ColorBtn extends Component {\n\n    state = {\n        displayPicker: false\n    }\n\n    handlerColorPicker = () => {\n        this.setState({displayPicker: !this.state.displayPicker});\n    }\n\n    handleClose = () => {\n        this.setState({displayPicker: false});\n    }\n \n    render() {\n\n        const backdrop = {\n            position: 'fixed',\n            top: '0px',\n            right: '0px',\n            left: '0px',\n            bottom: '0px',\n            backgroundColor: 'rgba(0,0,0,.4)'\n        }\n\n        const showColor = {\n            display: 'inline-block',\n            marginRight: '7px',\n            width: '32px', \n            height: '16px', \n            backgroundColor: this.props.color,\n            borderRadius: '5px'\n        }\n\n        let picker = null;\n\n        if (this.state.displayPicker) {\n            picker = (\n                <div className=\"Popover\">  \n                    <div style={backdrop} onClick={this.handleClose}></div>\n                    <ChromePicker  color={this.props.color} onChange={this.props.changeColor} />\n                </div>\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <div className=\"btn\" onClick={this.handlerColorPicker}>\n                    <span style={showColor} /> {this.props.color}\n                </div>\n                {picker}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default ColorBtn;","import React from 'react';\n\nimport './PixelCount.css';\n\nconst PixelCount = (props) => {\n    return (\n        <React.Fragment>\n            <label className=\"Label\">Pixels in a row</label>\n            <div className=\"PixelCount\">\n                <div className=\"button\" onClick={() => props.changeNumber(-1)}>\n                    <i className=\"fas fa-minus-circle\"></i>\n                </div>\n                <span>\n                    {props.number}\n                </span>\n                <div className=\"button\" onClick={() => props.changeNumber(1)}>\n                    <i className=\"fas fa-plus-circle\"></i>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default PixelCount;","import React from 'react';\n\nconst ToggleButton = (props) => {\n\n    const styleBtn = [\"btn\", props.active ? 'active' : ''];\n\n    return (\n        <button title={props.type} className={styleBtn.join(' ')} onClick={props.clicked}> \n            {props.children}\n        </button>\n    );\n};\n\nexport default ToggleButton;","import React from 'react';\nimport './Sidebar.css';\n\n// Logo\nimport logo from './logo.png';\n\n// Components\nimport ColorBtn from '../ColorBtn/ColorBtn';\nimport PixelCount from '../PixelCount/PixelCount';\nimport ToggleButton from '../ToggleButton/ToggleButton';\n\nconst sidebar = (props) => {\n    return (\n        <div className=\"Sidebar\">\n            <a className=\"Logo\" href=\"https://jotagep.github.io/PixelDrawer/\">\n                <img src={logo} alt=\"Logo\"/>\n            </a>\n            <div className=\"Controls\">\n                <PixelCount number={props.number}  changeNumber={props.changeNumber}/>\n                <ColorBtn color={props.color} changeColor={props.changeColor} />\n                <div className=\"flex_container\">\n                    <ToggleButton clicked={props.toggleGrid} active={props.grid} type=\"Grid\">\n                        <i className=\"fas fa-th\"></i>\n                    </ToggleButton>\n                    <ToggleButton clicked={props.toggleErase} active={props.erase} type=\"Erase\">\n                        <i className=\"fas fa-eraser\"></i>\n                    </ToggleButton>\n                </div>\n                <button className=\"btn\" onClick={props.resetBtn}>\n                    Clear\n                </button>\n            </div>\n            <div className=\"Social\">\n                <a href=\"https://github.com/jotagep\" target=\"_blank\" rel='noreferrer noopener'>\n                    <i className=\"fab fa-github\"></i>\n                </a>\n                <a href=\"https://twitter.com/Sir_JotaG\" target=\"_blank\" rel='noreferrer noopener'>\n                    <i className=\"fab fa-twitter\"></i>\n                </a>\n            </div>\n        </div>\n    );\n};\n\nexport default sidebar;","import React from 'react';\nimport './Pixel.css';\n\nconst Pixel = (props) => {\n\n    const pixelStyle = {\n        flexBasis: 100/props.number + '%',\n        border: props.grid ? '1px solid #666': '0',\n        backgroundColor: props.isNew ? 'transparent' : ''\n    }\n\n    return ( \n        <div \n            className=\"Pixel\" \n            draggable='false'\n            style={pixelStyle}\n            onMouseDown={props.clicked}\n            onMouseEnter={props.mouseEnter}\n            onTouchMove={props.touchMove}\n        >\n        </div>\n    );\n};\n\nexport default Pixel;","import React, { Component } from 'react';\nimport './Canvas.css';\n\nimport domToImg from 'dom-to-image';\n\nimport Pixel from './Pixel/Pixel';\n\nclass Canvas extends Component {\n\n    state = {\n        pressed: false\n    }\n\n    canvas = React.createRef();\n\n    downloadCanvas = () => {\n       return domToImg.toPng(this.canvas.current);\n    }\n\n    mouseDown = () => {\n        this.setState({pressed: true});\n    }\n\n    mouseUp = () => {\n        this.setState({pressed: false});\n    }\n\n    touchStart = (e) => {\n        this.setState({pressed: true});\n    }\n\n    touchEnd = () => {\n        this.setState({pressed: false});\n    }\n\n    touchMove = (e) => {\n        console.log(e.target.style.backgroundColor);\n        if (this.state.pressed) {\n            e.target.style.backgroundColor = this.props.erase ?  '#f9f9f9' : this.props.color;\n        } \n    }\n\n    pixelMouseEnter = (e) => {\n        if (this.state.pressed) {\n            e.target.style.backgroundColor = this.props.erase ?  '#f9f9f9' : this.props.color;\n        } \n    }\n\n    pixelClick = (e) => {\n        e.target.style.backgroundColor = this.props.erase ?  '#f9f9f9' : this.props.color;\n    }\n\n    render() {\n        let totalPixels = [];\n        const styleCanvas = ['Canvas', this.props.erase ? 'erase':'']\n\n        for (let i = 0; i < this.props.number; i++) {\n            for(let j = 0; j < this.props.number; j++) {\n                totalPixels.push(\n                    <Pixel \n                        key={[i,j]} \n                        clicked={this.pixelClick}\n                        mouseEnter={this.pixelMouseEnter}\n                        touchMove={this.touchMove}\n                        {...this.props}\n                    />\n                )\n            }\n        }\n\n        return (\n            <div className={styleCanvas.join(' ')}\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseUp}\n                onTouchStart={this.touchStart}\n                onTouchEnd={this.touchEnd}\n                ref={this.canvas}\n            >\n                {totalPixels}\n            </div>\n        );\n    }  \n}\n\nexport default Canvas;\n","import React, { Component } from 'react';\nimport './Content.css';\n\nimport swal from 'sweetalert2';\n\nimport Canvas from '../Canvas/Canvas';\n\nclass Content extends Component {\n\n    canvasComponent = React.createRef();\n\n    handleBtnClick = () => {\n        this.canvasComponent.current.downloadCanvas()\n            .then(dataURL => {           \n                swal({\n                    title: 'Name your draw:',\n                    input: \"text\",\n                    type: 'info',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Download it!'\n                  }).then((result) => {\n                    if (result.value) {\n                        const link = document.createElement('a');\n                        link.download = `${result.value}.png`;\n                        link.href = dataURL;\n                        link.click();\n                    }\n                  })\n            });\n    }\n\n    render() {\n        return (\n            <div className=\"Content\">\n                <Canvas \n                    {...this.props}\n                    ref={this.canvasComponent}\n                />\n                <button className=\"btn\" onClick={this.handleBtnClick}>\n                    Download <i className=\"fas fa-download\"></i>\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default Content;","import React, { Component } from 'react';\nimport './Panel.css';\n\n// Components\nimport Sidebar from '../../components/Sidebar/Sidebar';\nimport Content from '../../components/Content/Content';\n\nimport swal from 'sweetalert2';\n\nclass Panel extends Component {\n\n    state = {\n        color: '#001f3f',\n        numberPix: 16,\n        showGrid: true,\n        isErase: false,\n        isNew: false,\n    }\n\n    changeNumber = (number) => {\n        const n = this.state.numberPix + number;\n        if (n>=4 && n<=30) {\n            this.setState({ numberPix: n})\n        } else {\n            swal({\n                type: 'warning',\n                title: 'Check limits',\n                html: '<p>Number pixels should be between <b>4 (Min)</b> and <b>30 (Max)</b></p>'\n            });\n        }\n    }\n\n    changeColor = (color) => {\n        const newColor = color.hex;\n        this.setState({color: newColor});\n    }\n\n    isNewHandler = () => {\n        this.setState({isNew: true});\n        setTimeout(() => {\n            this.setState({isNew: false});\n        }, 500);\n    }\n\n    toggleGrid = () => {\n        this.setState({showGrid: !this.state.showGrid});\n    }\n\n    toggleErase = () => {\n        this.setState({isErase: !this.state.isErase});\n    }\n\n    render() {\n        return (\n            <div className='Panel'>\n                <Sidebar \n                    number={this.state.numberPix}\n                    color={this.state.color}\n                    grid={this.state.showGrid}\n                    erase={this.state.isErase}\n                    changeNumber={this.changeNumber}\n                    changeColor={this.changeColor} \n                    toggleGrid={this.toggleGrid}\n                    toggleErase={this.toggleErase}\n                    resetBtn={this.isNewHandler}\n                />\n                <Content \n                    color={this.state.color} \n                    number={this.state.numberPix}\n                    grid={this.state.showGrid}\n                    erase={this.state.isErase}\n                    isNew={this.state.isNew}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Panel;","import React, { Component } from 'react';\nimport './App.css';\n\n// Components\nimport Panel from './containers/Panel/Panel';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Panel />\n        <footer> \n          Made with <span role=\"img\" aria-label=\"Heart\">❤️</span> by  \n          <a href=\"https://jotagep.com/\" target=\"_blank\" rel='noreferrer noopener'>\n            Jorge G. Palacin\n          </a>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.f1224719.png\";"],"sourceRoot":""}